<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[时乃天道]]></title>
  <subtitle><![CDATA[路漫漫其修远兮，吾将上下而求索]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="https://sntd.github.io/"/>
  <updated>2015-08-22T15:30:14.000Z</updated>
  <id>https://sntd.github.io/</id>
  
  <author>
    <name><![CDATA[SNTD]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[iOS7之后JavaScript与Objective-C之间的通信]]></title>
    <link href="https://sntd.github.io/2015/08/22/JavaScript%E4%B8%8EObjective-C%E4%B9%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/"/>
    <id>https://sntd.github.io/2015/08/22/JavaScript与Objective-C之间的通信/</id>
    <published>2015-08-22T15:23:33.000Z</published>
    <updated>2015-08-22T15:30:14.000Z</updated>
    <content type="html"><![CDATA[<p>最近公司用<a href="https://pingxx.com" target="_blank" rel="external">Ping++</a>集成了第三方支付，并且微信端也集成了这个功能，而微信付款时需要调用原生的支付宝支付或者微信支付，由此引出了JS调用OC方法的问题。</p>
<h1 id="Js_-&gt;_Native">Js -&gt; Native</h1><p>以前传统的做法是根据url字符串来做特殊匹配，从而完成一些特定的工作譬如</p>
<pre><code>- (<span class="built_in">BOOL</span>)webView:(<span class="built_in">UIWebView</span> *)webView shouldStartLoadWithRequest:(<span class="built_in">NSURLRequest</span> *)request navigationType:(<span class="built_in">UIWebViewNavigationType</span>)navigationType
{
    <span class="built_in">NSString</span> *requestString = [[request URL] absoluteString];
    <span class="built_in">NSString</span> *scheme = <span class="string">@"js-pingpp"</span>;
    <span class="built_in">NSString</span> *protocol = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@://"</span>, scheme];
    <span class="keyword">if</span> ([requestString hasPrefix:protocol]) {
            <span class="comment">//调用相应支付Api</span>
        }
        <span class="keyword">return</span> <span class="literal">NO</span>;
    }
    <span class="keyword">return</span> <span class="literal">YES</span>;
}
</code></pre><p>但是iOS7之后, iOS 7 引入了 JavaScriptCore 库，它把 WebKit 的 JavaScript 引擎用 Objective-C 封装,让JavaScript与Objective-C之间的通信变的非常简单。首先导入JavaScriptCore.framework框架, 然后</p>
<p>JS端：</p>
<pre><code><span class="tag">TXBB_IOS_SDK</span><span class="class">.callPay</span>(<span class="tag">charge</span>, <span class="tag">this</span><span class="class">.success</span>, <span class="tag">this</span><span class="class">.cancel</span>);
</code></pre><p>OC端:</p>
<p>.h中引入头文件，并实现协议和对应的方法</p>
<pre><code><span class="preprocessor">#import <span class="title">&lt;JavaScriptCore/JavaScriptCore.h&gt;</span></span>

<span class="class"><span class="keyword">@protocol</span> <span class="title">WebViewJSExport</span> &lt;<span class="title">JSExport</span>&gt;</span>
JSExportAs
(callPay  <span class="comment">/** handleFactorialback 作为js方法的别名 */</span>,
- (<span class="keyword">void</span>)callPay:(<span class="built_in">NSString</span> *)charge success:(<span class="built_in">NSString</span> *) success cancel:(<span class="built_in">NSString</span> *)cancel
 );
<span class="keyword">@end</span>

<span class="class"><span class="keyword">@interface</span> <span class="title">BLWebviewController</span> : <span class="title">BLStatisticController</span></span>
&lt;<span class="built_in">UIWebViewDelegate</span>, WebViewJSExport&gt;
<span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) JSContext *context;
<span class="keyword">@end</span>
</code></pre><p>.m中在webViewDidFinishLoad中给context赋值，并把self指针给TXBB_IOS_SDK,JS端即可经过TXBB_IOS_SDK.callPay调用起Native方法</p>
<pre><code>-(<span class="keyword">void</span>)webViewDidFinishLoad:(<span class="built_in">UIWebView</span> *)webView
{
    <span class="keyword">self</span><span class="variable">.context</span> = [webView valueForKeyPath:<span class="string">@"documentView.webView.mainFrame.javaScriptContext"</span>];

    <span class="keyword">self</span><span class="variable">.context</span>[<span class="string">@"TXBB_IOS_SDK"</span>] = <span class="keyword">self</span>;
}

<span class="preprocessor">#pragma mark - JSExport Methods</span>
- (<span class="keyword">void</span>)callPay:(<span class="built_in">NSString</span> *)charge success:(<span class="built_in">NSString</span> *) success cancel:(<span class="built_in">NSString</span> *)cancel {
    ...
    [Pingpp createPayment:charge appURLScheme:<span class="string">@"msc"</span> withCompletion:completion];
}
</code></pre><h1 id="Native_-&gt;_Js">Native -&gt; Js</h1><p>OC端调用JS代码则只需通过context调用evaluateScript方法即可，下列代码即会用JS显示Hello World,而在iOS7.0之前你可能通过<code>[webView stringByEvaluatingJavaScriptFromString:@&quot;document.title&quot;]</code>方法来获取WebView的title。</p>
<pre><code>-(<span class="typename">void</span>)<span class="string">webViewDidFinishLoad:</span>(UIWebView *)webView  
{   
    JSContext *context=[webView <span class="string">valueForKeyPath:</span>@<span class="string">"documentView.webView.mainFrame.javaScriptContext"</span>];  
    NSString *alertJs=@<span class="string">"alert('Hello Word')"</span>; 
    [context <span class="string">evaluateScript:</span>alertJs];
}  
</code></pre><h1 id="最后">最后</h1><p>JS和OC通信还有个非常著名的第三方库<a href="https://github.com/marcuswestin/WebViewJavascriptBridge" target="_blank" rel="external">WebViewJavascriptBridge</a>,如果你的项目需要支持iOS6之前的系统，你可以通过这个项目实现JS和OC的通信。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近公司用<a href="https://pingxx.com" target="_blank" rel="external">Ping++</a>集成了第三方支付，并且微信端也集成了这个功能，而微信付款时需要调用原生的支付宝支付或者微信支付，由此引出了JS调用OC方法的]]>
    </summary>
    
      <category term="JavaScript" scheme="https://sntd.github.io/tags/JavaScript/"/>
    
      <category term="Objective-C" scheme="https://sntd.github.io/tags/Objective-C/"/>
    
      <category term="iOS7" scheme="https://sntd.github.io/tags/iOS7/"/>
    
      <category term="前端交互" scheme="https://sntd.github.io/categories/%E5%89%8D%E7%AB%AF%E4%BA%A4%E4%BA%92/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[关于UINavigationBar 和 UINavigationController的一点思考]]></title>
    <link href="https://sntd.github.io/2015/08/20/UINavigation%E7%9A%84%E4%B8%80%E7%82%B9%E6%80%9D%E8%80%83/"/>
    <id>https://sntd.github.io/2015/08/20/UINavigation的一点思考/</id>
    <published>2015-08-20T12:01:33.000Z</published>
    <updated>2015-08-21T07:07:41.000Z</updated>
    <content type="html"><![CDATA[<h1 id="UINavigationBar">UINavigationBar</h1><p>最近在项目中引入了<a href="https://github.com/nnhubbard/ZSSRichTextEditor" target="_blank" rel="external">ZSSRichTextEditor</a>用来编辑HTML文本,结果Push的时候ZSSRichTextEditor用的原生的ViewController跟项目中自定义的NavigationController产生了冲突,导致了ZSSRichTextEditor缺失了NavigationBar,查看代码后<code>`self.navigationBar.hidden = YES;</code></p>
<p>原来项目中隐藏了系统的NavigationBar,并在ViewController中重新写了NavigationBar,因为我所有ViewController都继承自自定义的ViewController,所以没有问题。于是我在ZSSRichTextEditor中重写写了NavigationBar跟项目保持一致解决了这个问题。</p>
<p><strong>由此我开始思考,客户端有哪些NavigationBar实现方式</strong></p>
<p><strong>淘宝客户端:</strong> 淘宝首页，push进入下一个页面的时候，NavigationBar是不一样的，实现原理应该是隐藏了系统的NavigationBar，然后在自己的每个ViewController中加上了不同的NavigationBar</p>
<p><strong>微信客户端:</strong> 微信几乎都是一样的NavigationBar,其实现原理应该跟我项目一致,统一继承了同一个自定义的ViewController,重新设置了NavigationBar的颜色，系统自带的是白色。</p>
<h1 id="UINavigationController">UINavigationController</h1><p>最近在项目中第一次实现了Cell左滑删除的功能，结果发现删除非常不灵敏，经常无法左滑！查看NavigationController代码:</p>
<pre><code><span class="built_in">UIPanGestureRecognizer</span> *recognizer = [[<span class="built_in">UIPanGestureRecognizer</span> alloc]initWithTarget:<span class="keyword">self</span>
                                                                           action:<span class="keyword">@selector</span>(paningGestureReceive:)];                                                                      
 recognizer<span class="variable">.delegate</span> = <span class="keyword">self</span>;
 [recognizer delaysTouchesBegan];
 <span class="keyword">self</span><span class="variable">.panGesture</span> = recognizer;
 [<span class="keyword">self</span><span class="variable">.view</span> addGestureRecognizer:recognizer];


- (<span class="built_in">BOOL</span>)gestureRecognizerShouldBegin:(<span class="built_in">UIGestureRecognizer</span> *)gestureRecognizer{
     <span class="comment">//在首页时禁用手势，让侧边栏滑动起作用</span>
     <span class="keyword">if</span> (<span class="keyword">self</span><span class="variable">.viewControllers</span><span class="variable">.count</span>==<span class="number">1</span>) {
         <span class="keyword">return</span> <span class="literal">NO</span>;
     }
     <span class="built_in">UIViewController</span> *ctl = (<span class="built_in">UIViewController</span>*)[<span class="keyword">self</span><span class="variable">.viewControllers</span> lastObject];
     <span class="keyword">if</span> ([ctl isKindOfClass:[MSCController class]])
     {
         <span class="built_in">BOOL</span> ret = ((MSCController *)ctl)<span class="variable">.canDragBack</span>;
         <span class="keyword">return</span> ret;
     }
     <span class="keyword">return</span> <span class="literal">YES</span>;
 }
</code></pre><p>发现在NavigationController中手势占据了整个页面，<strong>由此知道手势发生了冲突,有两种解决办法,手势添加在View的左半面或者在gestureRecognizerShouldBegin 中 return NO ,根据手势响应链,手势接着传递给了ViewController，于是问题解决了,并由此得知:</strong></p>
<p><code>- (instancetype)initWithRootViewController:(UIViewController *)rootViewController;</code></p>
<p><strong>UINavigationController的View涂层在ViewControoler之上,所以UINavigationBar 和 手势可以始终悬浮在ViewController之上,可以用来实现类似UIWindow添加View始终悬浮的效果</strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="UINavigationBar">UINavigationBar</h1><p>最近在项目中引入了<a href="https://github.com/nnhubbard/ZSSRichTextEditor" target="_blank" rel="exter]]>
    </summary>
    
      <category term="UINavigationBar" scheme="https://sntd.github.io/tags/UINavigationBar/"/>
    
      <category term="UINavigationController" scheme="https://sntd.github.io/tags/UINavigationController/"/>
    
      <category term="UI" scheme="https://sntd.github.io/categories/UI/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="https://sntd.github.io/2015/08/18/hello-world/"/>
    <id>https://sntd.github.io/2015/08/18/hello-world/</id>
    <published>2015-08-18T07:10:42.000Z</published>
    <updated>2015-08-18T07:10:42.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
    </summary>
    
  </entry>
  
</feed>
