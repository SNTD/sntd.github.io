<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[时乃天道]]></title>
  <subtitle><![CDATA[路漫漫其修远兮，吾将上下而求索]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="https://sntd.github.io/"/>
  <updated>2015-08-27T10:19:40.000Z</updated>
  <id>https://sntd.github.io/</id>
  
  <author>
    <name><![CDATA[SNTD]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[禅与 Objective-C 编程艺术 和 Objective-C高级编程]]></title>
    <link href="https://sntd.github.io/2015/08/27/iOS%E4%B9%A6%E7%B1%8D%E6%8E%A8%E8%8D%90/"/>
    <id>https://sntd.github.io/2015/08/27/iOS书籍推荐/</id>
    <published>2015-08-27T13:31:33.000Z</published>
    <updated>2015-08-27T10:19:40.000Z</updated>
    <content type="html"><![CDATA[<p>本周阅读了两本iOS书籍,都相当的不错！</p>
<h1 id="禅与_Objective-C_编程艺术"><a href="https://github.com/oa414/objc-zen-book-cn" target="_blank" rel="external">禅与 Objective-C 编程艺术</a></h1><p>本书常看到有人分享推荐，终于抽了时间看了，看的时候就震惊了！一直都在思考iOS的代码规范问题，本书完美的解决了我的问题，几乎每个知识点都是经验之谈，iOS代码规范必读书籍，强推！</p>
<h1 id="Objective-C高级编程:iOS与OS_X多线程和内存管理"><a href="http://www.amazon.cn/dp/B00DE60G3S/ref=cm_sw_r_qz_2_dp_hdPPub11MFE6G" target="_blank" rel="external">Objective-C高级编程:iOS与OS X多线程和内存管理</a></h1><p>本书共三章:自动引用计数 Blocks 以及GCD</p>
<p>这本算是内功修养了，对扎实iOS开发的理解非常有用, GCD基本介绍的也比较全面,比之前零散的看一些多线程的博客真是舒服多了！</p>
<h1 id="杂感">杂感</h1><p>老外写的书籍真是相当的不错啊,整体质量比国内的要高出很多，不禁为自己拙劣的英文水平感到着急，不然就可以直接阅读英文资料了！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>本周阅读了两本iOS书籍,都相当的不错！</p>
<h1 id="禅与_Objective-C_编程艺术"><a href="https://github.com/oa414/objc-zen-book-cn" target="_blank" rel="external">]]>
    </summary>
    
      <category term="Objective-C高级编程" scheme="https://sntd.github.io/tags/Objective-C%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
    
      <category term="UINavigationBar" scheme="https://sntd.github.io/tags/UINavigationBar/"/>
    
      <category term="iOS书籍" scheme="https://sntd.github.io/categories/iOS%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[UIButton的扩展:随心所欲调整Image和Label的位置]]></title>
    <link href="https://sntd.github.io/2015/08/24/LDButton/"/>
    <id>https://sntd.github.io/2015/08/24/LDButton/</id>
    <published>2015-08-24T12:01:33.000Z</published>
    <updated>2015-08-27T09:36:42.000Z</updated>
    <content type="html"><![CDATA[<p>刚开始学iOS的时候，一直通过imageInserts 和 titleInserts 设置UIButton的Image以及Label位置，但是它们两个经常互相挤，导致需要特殊效果譬如Image和Label 左右分布，上下分布等功能实现起来颇为麻烦，经常需要调整。而采用UIImage＋UILabel + 手势的组合实现起来又过于繁琐，于是研究了下UIButton,写了自定义的<a href="https://github.com/SNTD/LDButton" target="_blank" rel="external">LDButton</a>用来实现对Image 和 Label的位置有特殊要求的功能。</p>
<h1 id="LDButton效果演示">LDButton效果演示</h1><p><img src="https://github.com/sntd/LDButton/raw/master/Picture/LDButton.gif" alt=""></p>
<h1 id="如何使用LDButton">如何使用LDButton</h1><p>你只需要按照你的意愿设置 Image 和 Label 的位置即可，如果不设置则会退化成UIButton</p>
<pre><code><span class="comment">//核心设置</span>
btn.imageRect = CGRectMake((btnWidth - <span class="number">40</span>)/<span class="number">2.0</span>, <span class="number">50</span> - <span class="number">30</span>, <span class="number">40</span>, <span class="number">30</span>);
btn.labelRect = CGRectMake(<span class="number">0</span>, <span class="number">50</span>, btnWidth, <span class="number">30</span>);
</code></pre><h1 id="代码实现">代码实现</h1><p>核心代码是重写imageRectForContentRect和titleRectForContentRect两个方法,直接返回设置的imageRect 和 labelRect.</p>
<h2 id="问题一：有时需要调整Button的大小,内部的Image的Frame要跟着变">问题一：有时需要调整Button的大小,内部的Image的Frame要跟着变</h2><p>这直接重写ImageRect的set方法即可,调用setNeedsDisplay会重刷imageRectForContentRect方法</p>
<pre><code><span class="tag">-</span> (<span class="tag">void</span>)<span class="rule"><span class="attribute">setImageRect</span>:<span class="value">(CGRect)imageRect {
    _imageRect = imageRect</span></span>;

    <span class="attr_selector">[self setNeedsDisplay]</span>;
}
</code></pre><h2 id="问题二：有的时候经常忘记设置imageRect和labelRect,结果直接崩溃了">问题二：有的时候经常忘记设置imageRect和labelRect,结果直接崩溃了</h2><p>刚学iOS的时候一直没有找到很好的解决办法，直到我学习了Runtime相关知识,解决方案：没有设置imageRect 和labelRect时，直接返回系统的方法。</p>
<pre><code><span class="class"><span class="keyword">@implementation</span> <span class="title">NSObject</span>(<span class="title">Extension</span>)</span>
+ (<span class="keyword">void</span>)swizzleInstanceMethod:(Class)class originalSelector:(SEL)originalSelector swizzledSelector:(SEL)swizzledSelector
{
    Method swizzledMehtod = class_getInstanceMethod(class, swizzledSelector);
    Method originalMehtod = class_getInstanceMethod(class, originalSelector);
    <span class="comment">// 交换2个方法的实现</span>
    method_exchangeImplementations(swizzledMehtod, originalMehtod);
}
<span class="keyword">@end</span>

+ (<span class="keyword">void</span>)load
{
    [<span class="keyword">self</span> swizzleInstanceMethod:<span class="built_in">NSClassFromString</span>(<span class="string">@"LDButton"</span>) originalSelector:<span class="keyword">@selector</span>(imageRectForContentRect:) swizzledSelector:<span class="keyword">@selector</span>(ld_imageRectForContentRect:)];

    [<span class="keyword">self</span> swizzleInstanceMethod:<span class="built_in">NSClassFromString</span>(<span class="string">@"LDButton"</span>) originalSelector:<span class="keyword">@selector</span>(titleRectForContentRect:) swizzledSelector:<span class="keyword">@selector</span>(ld_titleRectForContentRect:)];
}

- ( <span class="built_in">CGRect</span> )ld_imageRectForContentRect:( <span class="built_in">CGRect</span> )contentRect
{
    <span class="comment">//设置了值就返回设置的值,否则用系统的</span>
    <span class="keyword">if</span> (!<span class="built_in">CGRectEqualToRect</span>(_imageRect,<span class="built_in">CGRectZero</span>)) {
        <span class="keyword">return</span> _imageRect;
    }
    <span class="keyword">return</span> [<span class="keyword">self</span> ld_imageRectForContentRect:contentRect];
}
</code></pre><p>最后：</p>
<p>详细的demo,大家可以参见GitHub地址<a href="https://github.com/SNTD/LDButton" target="_blank" rel="external">https://github.com/SNTD/LDButton</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>刚开始学iOS的时候，一直通过imageInserts 和 titleInserts 设置UIButton的Image以及Label位置，但是它们两个经常互相挤，导致需要特殊效果譬如Image和Label 左右分布，上下分布等功能实现起来颇为麻烦，经常需要调整。而采用UII]]>
    </summary>
    
      <category term="UIButton" scheme="https://sntd.github.io/tags/UIButton/"/>
    
      <category term="UI" scheme="https://sntd.github.io/categories/UI/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS7之后JavaScript与Objective-C之间的通信]]></title>
    <link href="https://sntd.github.io/2015/08/22/JavaScript%E4%B8%8EObjective-C%E4%B9%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/"/>
    <id>https://sntd.github.io/2015/08/22/JavaScript与Objective-C之间的通信/</id>
    <published>2015-08-22T15:23:33.000Z</published>
    <updated>2015-08-22T15:30:14.000Z</updated>
    <content type="html"><![CDATA[<p>最近公司用<a href="https://pingxx.com" target="_blank" rel="external">Ping++</a>集成了第三方支付，并且微信端也集成了这个功能，而微信付款时需要调用原生的支付宝支付或者微信支付，由此引出了JS调用OC方法的问题。</p>
<h1 id="Js_-&gt;_Native">Js -&gt; Native</h1><p>以前传统的做法是根据url字符串来做特殊匹配，从而完成一些特定的工作譬如</p>
<pre><code>- (<span class="built_in">BOOL</span>)webView:(<span class="built_in">UIWebView</span> *)webView shouldStartLoadWithRequest:(<span class="built_in">NSURLRequest</span> *)request navigationType:(<span class="built_in">UIWebViewNavigationType</span>)navigationType
{
    <span class="built_in">NSString</span> *requestString = [[request URL] absoluteString];
    <span class="built_in">NSString</span> *scheme = <span class="string">@"js-pingpp"</span>;
    <span class="built_in">NSString</span> *protocol = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@://"</span>, scheme];
    <span class="keyword">if</span> ([requestString hasPrefix:protocol]) {
            <span class="comment">//调用相应支付Api</span>
        }
        <span class="keyword">return</span> <span class="literal">NO</span>;
    }
    <span class="keyword">return</span> <span class="literal">YES</span>;
}
</code></pre><p>但是iOS7之后, iOS 7 引入了 JavaScriptCore 库，它把 WebKit 的 JavaScript 引擎用 Objective-C 封装,让JavaScript与Objective-C之间的通信变的非常简单。首先导入JavaScriptCore.framework框架, 然后</p>
<p>JS端：</p>
<pre><code><span class="tag">TXBB_IOS_SDK</span><span class="class">.callPay</span>(<span class="tag">charge</span>, <span class="tag">this</span><span class="class">.success</span>, <span class="tag">this</span><span class="class">.cancel</span>);
</code></pre><p>OC端:</p>
<p>.h中引入头文件，并实现协议和对应的方法</p>
<pre><code><span class="preprocessor">#import <span class="title">&lt;JavaScriptCore/JavaScriptCore.h&gt;</span></span>

<span class="class"><span class="keyword">@protocol</span> <span class="title">WebViewJSExport</span> &lt;<span class="title">JSExport</span>&gt;</span>
JSExportAs
(callPay  <span class="comment">/** handleFactorialback 作为js方法的别名 */</span>,
- (<span class="keyword">void</span>)callPay:(<span class="built_in">NSString</span> *)charge success:(<span class="built_in">NSString</span> *) success cancel:(<span class="built_in">NSString</span> *)cancel
 );
<span class="keyword">@end</span>

<span class="class"><span class="keyword">@interface</span> <span class="title">BLWebviewController</span> : <span class="title">BLStatisticController</span></span>
&lt;<span class="built_in">UIWebViewDelegate</span>, WebViewJSExport&gt;
<span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) JSContext *context;
<span class="keyword">@end</span>
</code></pre><p>.m中在webViewDidFinishLoad中给context赋值，并把self指针给TXBB_IOS_SDK,JS端即可经过TXBB_IOS_SDK.callPay调用起Native方法</p>
<pre><code>-(<span class="keyword">void</span>)webViewDidFinishLoad:(<span class="built_in">UIWebView</span> *)webView
{
    <span class="keyword">self</span><span class="variable">.context</span> = [webView valueForKeyPath:<span class="string">@"documentView.webView.mainFrame.javaScriptContext"</span>];

    <span class="keyword">self</span><span class="variable">.context</span>[<span class="string">@"TXBB_IOS_SDK"</span>] = <span class="keyword">self</span>;
}

<span class="preprocessor">#pragma mark - JSExport Methods</span>
- (<span class="keyword">void</span>)callPay:(<span class="built_in">NSString</span> *)charge success:(<span class="built_in">NSString</span> *) success cancel:(<span class="built_in">NSString</span> *)cancel {
    ...
    [Pingpp createPayment:charge appURLScheme:<span class="string">@"msc"</span> withCompletion:completion];
}
</code></pre><h1 id="Native_-&gt;_Js">Native -&gt; Js</h1><p>OC端调用JS代码则只需通过context调用evaluateScript方法即可，下列代码即会用JS显示Hello World,而在iOS7.0之前你可能通过<code>[webView stringByEvaluatingJavaScriptFromString:@&quot;document.title&quot;]</code>方法来获取WebView的title。</p>
<pre><code>-(<span class="typename">void</span>)<span class="string">webViewDidFinishLoad:</span>(UIWebView *)webView  
{   
    JSContext *context=[webView <span class="string">valueForKeyPath:</span>@<span class="string">"documentView.webView.mainFrame.javaScriptContext"</span>];  
    NSString *alertJs=@<span class="string">"alert('Hello Word')"</span>; 
    [context <span class="string">evaluateScript:</span>alertJs];
}  
</code></pre><h1 id="最后">最后</h1><p>JS和OC通信还有个非常著名的第三方库<a href="https://github.com/marcuswestin/WebViewJavascriptBridge" target="_blank" rel="external">WebViewJavascriptBridge</a>,如果你的项目需要支持iOS6之前的系统，你可以通过这个项目实现JS和OC的通信。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近公司用<a href="https://pingxx.com" target="_blank" rel="external">Ping++</a>集成了第三方支付，并且微信端也集成了这个功能，而微信付款时需要调用原生的支付宝支付或者微信支付，由此引出了JS调用OC方法的]]>
    </summary>
    
      <category term="JavaScript" scheme="https://sntd.github.io/tags/JavaScript/"/>
    
      <category term="Objective-C" scheme="https://sntd.github.io/tags/Objective-C/"/>
    
      <category term="iOS7" scheme="https://sntd.github.io/tags/iOS7/"/>
    
      <category term="前端交互" scheme="https://sntd.github.io/categories/%E5%89%8D%E7%AB%AF%E4%BA%A4%E4%BA%92/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[关于UINavigationBar 和 UINavigationController的一点思考]]></title>
    <link href="https://sntd.github.io/2015/08/20/UINavigation%E7%9A%84%E4%B8%80%E7%82%B9%E6%80%9D%E8%80%83/"/>
    <id>https://sntd.github.io/2015/08/20/UINavigation的一点思考/</id>
    <published>2015-08-20T12:01:33.000Z</published>
    <updated>2015-08-23T06:40:09.000Z</updated>
    <content type="html"><![CDATA[<h1 id="UINavigationBar">UINavigationBar</h1><p>最近在项目中引入了<a href="https://github.com/nnhubbard/ZSSRichTextEditor" target="_blank" rel="external">ZSSRichTextEditor</a>用来编辑HTML文本,结果Push的时候ZSSRichTextEditor用的原生的ViewController跟项目中自定义的NavigationController产生了冲突,导致了ZSSRichTextEditor缺失了NavigationBar,查看代码后<code>`self.navigationBar.hidden = YES;</code></p>
<p>原来项目中隐藏了系统的NavigationBar,并在ViewController中重新写了NavigationBar,因为我所有ViewController都继承自自定义的ViewController,所以没有问题。于是我在ZSSRichTextEditor中重写写了NavigationBar跟项目保持一致解决了这个问题。</p>
<p><strong>由此我开始思考,客户端有哪些NavigationBar实现方式</strong></p>
<p><strong>淘宝客户端:</strong> 淘宝首页，push进入下一个页面的时候，NavigationBar是不一样的，实现原理应该是隐藏了系统的NavigationBar，然后在自己的每个ViewController中加上了不同的NavigationBar</p>
<p> <img src="https://github.com/SNTD/sntd.github.io/raw/master/gif/淘宝.gif" alt=""> </p>
<p><strong>微信客户端:</strong> 微信几乎都是一样的NavigationBar,其实现原理应该跟我项目一致,统一继承了同一个自定义的ViewController,重新设置了NavigationBar的颜色，系统自带的是白色。</p>
<p> <img src="https://github.com/SNTD/sntd.github.io/raw/master/gif/微信.gif" alt=""></p>
<h1 id="UINavigationController">UINavigationController</h1><p>最近在项目中第一次实现了Cell左滑删除的功能，结果发现删除非常不灵敏，经常无法左滑！查看NavigationController代码:</p>
<pre><code><span class="built_in">UIPanGestureRecognizer</span> *recognizer = [[<span class="built_in">UIPanGestureRecognizer</span> alloc]initWithTarget:<span class="keyword">self</span>

                                                                           action:<span class="keyword">@selector</span>(paningGestureReceive:)];                                                                      

 recognizer<span class="variable">.delegate</span> = <span class="keyword">self</span>;

 [recognizer delaysTouchesBegan];

 <span class="keyword">self</span><span class="variable">.panGesture</span> = recognizer;

 [<span class="keyword">self</span><span class="variable">.view</span> addGestureRecognizer:recognizer];





- (<span class="built_in">BOOL</span>)gestureRecognizerShouldBegin:(<span class="built_in">UIGestureRecognizer</span> *)gestureRecognizer{

     <span class="comment">//在首页时禁用手势，让侧边栏滑动起作用</span>

     <span class="keyword">if</span> (<span class="keyword">self</span><span class="variable">.viewControllers</span><span class="variable">.count</span>==<span class="number">1</span>) {

         <span class="keyword">return</span> <span class="literal">NO</span>;

     }

     <span class="built_in">UIViewController</span> *ctl = (<span class="built_in">UIViewController</span>*)[<span class="keyword">self</span><span class="variable">.viewControllers</span> lastObject];

     <span class="keyword">if</span> ([ctl isKindOfClass:[MSCController class]])

     {

         <span class="built_in">BOOL</span> ret = ((MSCController *)ctl)<span class="variable">.canDragBack</span>;

         <span class="keyword">return</span> ret;

     }

     <span class="keyword">return</span> <span class="literal">YES</span>;
</code></pre><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>发现在NavigationController中手势占据了整个页面，<strong>由此知道手势发生了冲突,有两种解决办法,手势添加在View的左半面或者在gestureRecognizerShouldBegin 中 return NO ,根据手势响应链,手势接着传递给了ViewController，于是问题解决了,并由此得知:</strong></p>
<p><code>- (instancetype)initWithRootViewController:(UIViewController *)rootViewController;</code></p>
<p><strong>UINavigationController的View涂层在ViewControoler之上,所以UINavigationBar 和 手势可以始终悬浮在ViewController之上,可以用来实现类似UIWindow添加View始终悬浮的效果</strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="UINavigationBar">UINavigationBar</h1><p>最近在项目中引入了<a href="https://github.com/nnhubbard/ZSSRichTextEditor" target="_blank" rel="exter]]>
    </summary>
    
      <category term="UINavigationBar" scheme="https://sntd.github.io/tags/UINavigationBar/"/>
    
      <category term="UINavigationController" scheme="https://sntd.github.io/tags/UINavigationController/"/>
    
      <category term="UI" scheme="https://sntd.github.io/categories/UI/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello Hexo]]></title>
    <link href="https://sntd.github.io/2015/08/18/Hello%20Hexo/"/>
    <id>https://sntd.github.io/2015/08/18/Hello Hexo/</id>
    <published>2015-08-18T12:01:33.000Z</published>
    <updated>2015-08-23T13:31:33.000Z</updated>
    <content type="html"><![CDATA[<p>很早以前就开始想搭建一个博客来记录自己技术成长的点点滴滴，然后惰性使然，一直没有付出实践，直到看着各路大神其乐融融的分享着各自研究的技术，我终于踏出了自己的一步。</p>
<h1 id="购买域名＋购买服务器＋GHOST">购买域名＋购买服务器＋GHOST</h1><p>平时看过不少牛人博客，对<a href="http://onevcat.com/" target="_blank" rel="external">onevcat</a>的博客记忆尤深，界面绚丽，于是一开始打算搭建一个类似的博客，然后对着网上标准文档仔仔细细每步对照了两遍之后，仍然卡死在了最后一步上，有欢迎节目，却无法利用domain_name/ghost进入后台发表博文，辗转反侧一天之后终究没有想到问题之所在，于是看着一年前的标准搭建过程只能泪流满面。。。</p>
<h1 id="GitHub_Pages_＋_Hexo">GitHub Pages ＋ Hexo</h1><p>后来经同事提醒可以用Hexo搭建博客，豁然明白平时feedly订阅的不少博客貌似都是用的Hexo，于是开始了Hexo搭建之旅。</p>
<h4 id="首先你得有个GitHub账号">首先你得有个GitHub账号</h4><p>然后在GitHub中建立自己的仓库，命名为GitHub_Name.github.io(譬如我的域名sntd.github.io)</p>
<h4 id="在本地调通Hexo博客">在本地调通Hexo博客</h4><p>这又是一个蛋疼的过程，再次对着2年前的Hexo博客搭建流程泪流满面，因为有了之前的经验，这一次我毫不犹豫的上了Hexo官网，我相信最新的教材一定不会欺骗我幼小的心灵，在<a href="https://hexo.io" target="_blank" rel="external">Hexo</a>我终于轻松愉快的用几条命令行完成了本地博客的搭建，用hexo server本地运行出现了Hello World</p>
<h4 id="将你本地的博客推上之前你在GitHub建立的库">将你本地的博客推上之前你在GitHub建立的库</h4><p>在Hexo 3.0之后type由github 改为了git，如果你对着百度搜出来的排名前几的有些年头的博客搭建流程搭建的话，那你肯定GG了，推送不上去，这点官网有明确的说明用git</p>
<pre><code><span class="attribute">deploy</span>:
  <span class="attribute">type</span>: git
  <span class="attribute">repository</span>: <span class="attribute">https</span>:<span class="comment">//github.com/SNTD/sntd.github.io.git</span>
  <span class="attribute">branch</span>: master  
</code></pre><p>最后一切准备OK，用命令hexo deploy推上去时，又碰到了问题：</p>
<pre><code>sntddeMacBook-<span class="keyword">Pro</span>:blog sntd$ hexo deploy
INFO  Deploying: git
INFO  Clearing .deploy folder...
FATAL Something's wrong. Maybe you can find the solution here: http:<span class="comment">//hexo.io/docs/troubleshooting.html</span>
<span class="keyword">Error</span>: EACCES, unlink '/Users/sntd/Desktop/GitHub/hexo/blog/.deploy_git/<span class="keyword">about</span>/index.html'
    at <span class="keyword">Error</span> (native)
</code></pre><p>于是我又开始无脑的在百度/Google/Stackoverflow开始寻找问题的答案，搜了一遍之后我又一次没有找到问题的答案，这一刻内心无比复杂，难道我又得这么跪了？不过还好我这次态度比较坚决，必须搭建成功。于是我才开始自己思考这个问题的答案。一看EACCES这个单词,Permission denied,权限拒绝，我终于豁然开朗毫无犹豫的输入了</p>
<p><strong>sudo hexo deploy</strong></p>
<p>问题迎刃而解，我终于完成了本次博客的搭建。</p>
<h1 id="后记">后记</h1><p>对着几年前的文章搭建现在的博客确实是一个比较艰难的过程，强烈建议大家看最新官网的说明文档，都非常的靠谱，也能节省很多时间，历经两次，终于搭建成功，有志者事竞成，大家只要坚持不断的解决搭建过程中出现的问题，一定也可以有自己的博客，另外本篇搭建过程过于简单，希望大家在搜索下具体的细节，关于Hexo 主题的选取，我推荐<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">Next</a>，非常的成熟，简洁美观，功能非常全面。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>很早以前就开始想搭建一个博客来记录自己技术成长的点点滴滴，然后惰性使然，一直没有付出实践，直到看着各路大神其乐融融的分享着各自研究的技术，我终于踏出了自己的一步。</p>
<h1 id="购买域名＋购买服务器＋GHOST">购买域名＋购买服务器＋GHOST</h1><p>平]]>
    </summary>
    
      <category term="Hexo" scheme="https://sntd.github.io/tags/Hexo/"/>
    
      <category term="博客搭建" scheme="https://sntd.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
</feed>
